
//Average last time I checked it worked
proc float Averages(float $input[])
{
    float $arraySum;
    float $numCount;
    float $arrayAverage;
    
    $numCount=size($input);
   for($value = 0; $value < size($input); $value ++)
    $arraySum += $input[$value];

    $arrayAverage = $arraySum / $numCount;
    
    return $arrayAverage;     

}
Averages{1,2,3.4,5,6};


//Median Syntax is wrong, thought that pseduo code was better than nothing.
proc int[] findMedian(int $input[])
{
    //sort all the nums least to great
    int $sortedInts[];
	$sortInts = `sort $input`;
   
    //count the size, devide by 2, find out if the size is even or odd by Modulus
    int $sortedSize;
    int $EvenorOdd[];
    $sortedSize = [size($sortedInts)] / 2;
    $EvenorOdd = [size($sortedSize)] % 2;
    
    //if odd  take the  array size / 2 + .5 (to equial a whole #)
    //then take the resulting number and return that place in the array
    if ([size($EvenorOdd)] = 1)
    { 
      int $oddMiddle;
      $oddMiddle = [size($sortedInts)] / 2 + 0.5;
      return $sortedInts[$oddMiddle];
	  //I'm not sure the right way to right line 49, I want it to go to the value of $oddMiddle in the $sortedInts array....
     }
	 
     // take the array / in two then add or subtract to get the two middle numbers
     //then take those two numbers add them together and devide to get your answer
     else 
     {
       int $lowMiddle;
       int $highMiddle;
       float $evenMiddle;
       $lowMiddle = [size($sortedInts)] / 2 - 1;
       $highMiddle = [size($sortedInts)] / 2 + 1;
       $evenMiddle = $lowMiddle + $highMiddle / 2;
       return $evenMiddle
     }
}
findMedian ({2,3,1});


//Mode
proc float Mode(float $numbers[])
{
//Clayton's code
    float $values[];
    float $frequency[];
    
    for ($i=0; $i<size($numbers); $i++)
    {
        if (!floatArrayContains($numbers[$i], $values))
        {
            $values[size($values)] = $numbers[$i];
            $frequency[size($values)] = 1;
        }
        else
        {
            // values == [3,5,2,87,4,56]
            // freq   == [1,3,2, 1,1, 1]
            int $index;
            $index = floatArrayFind($numbers[$i], 0, $values);
            $frequency[$index] = $frequency[$index] + 1;
        }
    }
	// Loop through frequency[] to find largest value
    // Get the index of the said value
    // Get associated value from $values[]
    // Return as the mode

    return 1;
}
